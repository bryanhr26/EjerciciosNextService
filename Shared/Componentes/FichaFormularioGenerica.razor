@using System.Reflection
@using BlazorApp1.Models

@typeparam T
@inherits BaseFormulario<T>

<div class="ficha-vehiculo" style="height: 100%; display: @(RegistroCompleto == null ? "none" : "block");">

	@if (RegistroCompleto != null)
	{
		<div class="datos-vehiculo">
			@if (TieneTabulaciones)
			{
				<ul class="nav nav-tabs" id="myTab" role="tablist">
					@foreach (var tab in Lista_Tabulaciones!)
					{
						<li class="nav-item" role="presentation">
							<button class="nav-link @(PestanyaSeleccionada == tab.ID ? "active" : "")"
							id="home-tab"
							data-bs-toggle="tab"
							data-bs-target="#tabContent-@tab.ID"
							type="button"
							role="tab"
							aria-controls="tabContent-@tab.ID"
							aria-selected="@(PestanyaSeleccionada == tab.ID)"
							@onclick="() => CambiarPestanya(tab.ID)">
								@tab.Nombre
							</button>
						</li>
					}
				</ul>
			}

			<div class="tab-content" id="myTabContent">
				@if (TieneTabulaciones)
				{
					@foreach (var tab in Lista_Tabulaciones!)
					{
						<div class="tab-pane fade @(PestanyaSeleccionada == tab.ID ? "active show" : "")"
						id="home"
						role="tabpanel"
						aria-labelledby="tab-@tab.ID"
						style="padding-top: 20px;">

							@if (Atributos != null && Atributos.Count() > 0)
							{
								@foreach (var atributo in ObtenerAtributosOrdenados())
								{
									var propiedadesFormulario = ObtenerDatosFormularioAtributo(atributo);

									if (propiedadesFormulario != null)
									{
										var pestanyaValor = propiedadesFormulario.Pestanya;

										// Condición para filtrar según el valor de Pestanya
										if (pestanyaValor == tab.ID)
										{
											var valor = atributo.GetValue(RegistroCompleto);

											<div>
												@{
													var tipoLabel = ObtenerTipoLabel(atributo);
													var deshabilitado = (!propiedadesFormulario.Habilitado || ModoAccion == Accion.Ver);
												}

												@if (propiedadesFormulario.Visible)
												{
													<label><strong>@atributo.Name:</strong></label>
													<input type="@tipoLabel"
													style="@(deshabilitado ? "opacity: 0.6; pointer-events: none;" : "") width: @propiedadesFormulario.Ancho; margin: @propiedadesFormulario.Margenes"
													disabled="@deshabilitado"
													value="@valor"
													@onchange="(e) => ActualizarValor(e, atributo.Name)" />
												}
											</div>
										}
									}
								}
							}
						</div>
					}
				}

				@if (!TieneTabulaciones)
				{
					@if (Atributos != null && Atributos.Count() > 0)
					{
						<div class="contenedor-notab">
							@foreach (var atributo in ObtenerAtributosOrdenados())
							{

								var propiedadesFormulario = ObtenerDatosFormularioAtributo(atributo);

								if (propiedadesFormulario != null)
								{
									<div class="contenedor-valorAtributo">

										@{
											var tipoLabel = ObtenerTipoLabel(atributo);
											var deshabilitado = (!propiedadesFormulario.Habilitado || ModoAccion == Accion.Ver);
										}

										@if (propiedadesFormulario.Visible)
										{
											@* Comprobación si el atributo es bool y cambiamos el orden *@
											@if (atributo.PropertyType == typeof(bool))
											{
												<div class="valorAtributosFormBool">
													<input type="@tipoLabel"
													style="@(deshabilitado ? "opacity: 0.6; pointer-events: none;" : ""); width: @propiedadesFormulario.Ancho; margin: @propiedadesFormulario.Margenes"
													disabled="@deshabilitado"
													value="@atributo.GetValue(RegistroCompleto)"
													@onchange="(e) => ActualizarValor(e, atributo.Name)" />
													<label><strong>@propiedadesFormulario.Titulo</strong></label>
													<label style=" margin-left: 5px">@propiedadesFormulario.Subtexto</label>
												</div>
											}
											else
											{
												<div class="valorAtributoForm">
													<label><strong>@propiedadesFormulario.Titulo</strong></label>
													<div class="input-group" style="width: @propiedadesFormulario.Ancho; height: 38px; margin: 5px 0px 0px 0px;">
														<input type="@tipoLabel"
														style="@(deshabilitado ? "opacity: 0.6; pointer-events: none;" : "") width: @propiedadesFormulario.Ancho; margin: @propiedadesFormulario.Margenes;"
														disabled="@deshabilitado"
														value="@atributo.GetValue(RegistroCompleto)"
														@onchange="(e) => ActualizarValor(e, atributo.Name)" />
														@if (ModoAccion == Accion.Editar){
															<button type="button" class="ns-input-clear" @onclick="() => LimpiarValor(atributo.Name)">
																<span class="icono-limpiar" title="" style="font-size: 15px; line-height: 1">
																	<svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
																		<path d="M18 6L12 12M12 12L6 18M12 12L18 18M12 12L6 6"
																		stroke="#2a2a2a"
																		stroke-width="1.5"
																		stroke-linecap="round"
																		stroke-linejoin="round">
																		</path>
																	</svg>
																</span>
															</button>
														}
													</div>
												</div>
											}
										}
									</div>
									var saltoLinea = atributo.GetCustomAttribute<PropiedadesFormularioAttribute>()?.SaltoLinea;
									@if (saltoLinea == true)
									{
										<!-- Si el atributo tiene SaltoLinea, lo bajamos a la linea inferior -->
										<div style="width: 100%;"></div>
									}
								}
							}
						</div>
					}
				}
			</div>
		</div>
		<div class="botones-accion">
			@if (ModoAccion == Accion.Editar)
			{
				<button  class="boton-cancelar">Cancelar</button>
				<button  class="boton-guardar">Guardar</button>
			}

			@if (ModoAccion == Accion.Eliminar)
			{
				<div>
					<p>¿Estás seguro de que deseas eliminar este vehículo?</p>
					<button  class="boton-cancelar">Cancelar</button>
					<button  class="boton-eliminar">Eliminar</button>
				</div>
			}

			@if (ModoAccion == Accion.Crear)
			{
				<button class="boton-cancelar">Cancelar</button>
				<button class="boton-guardar">Guardar</button>
			}
		</div>
	}
</div>

@code {
	[Parameter] public List<Tabulacion>? Lista_Tabulaciones { get; set; }
	[Parameter] public PestanyaEnum PestanyaSeleccionada { get; set; }
	[Parameter] public EventCallback<PestanyaEnum> OnCambiarPestanya { get; set; }

	private bool TieneTabulaciones => Lista_Tabulaciones != null && Lista_Tabulaciones.Any();

	private async Task CambiarPestanya(PestanyaEnum pestanya)
	{
		PestanyaSeleccionada = pestanya;
		await OnCambiarPestanya.InvokeAsync(PestanyaSeleccionada);
	}

	// Función para limpiar el valor del atributo
	private void LimpiarValor(string nombreAtributo)
	{
		// Encuentra el atributo correspondiente
		var atributo = typeof(T).GetProperty(nombreAtributo);

		if (atributo != null)
		{
			// Establece el valor del atributo a null o vacío, dependiendo del tipo
			if (atributo.PropertyType == typeof(string))
			{
				atributo.SetValue(RegistroCompleto, string.Empty);
			}
			else if (atributo.PropertyType == typeof(bool))
			{
				atributo.SetValue(RegistroCompleto, false);
			}
			else
			{
				// Para otros tipos, podrías asignar el valor por defecto
				atributo.SetValue(RegistroCompleto, null);
			}

			StateHasChanged();
		}
	}

	public void ActualizarValor(ChangeEventArgs e, string propiedad)
	{
		// Obtiene el nuevo valor desde el evento ChangeEventArgs
		var nuevoValor = e.Value.ToString();

		// Usamos reflexión para obtener la propiedad correspondiente en el objeto
		var propiedadInfo = typeof(T).GetProperty(propiedad);

		if (propiedadInfo != null && propiedadInfo.CanWrite)
		{
			// Asignamos el nuevo valor a la propiedad
			propiedadInfo.SetValue(RegistroCompleto, Convert.ChangeType(nuevoValor, propiedadInfo.PropertyType));

		}
	}


	private IEnumerable<PropertyInfo> ObtenerAtributosOrdenados()
	{
		var atributos = typeof(T).GetProperties();

		// Filtra las propiedades que tienen el atributo OrdenFormularioAttribute
		var propiedadesConOrden = atributos.Where(p => p.GetCustomAttribute<OrdenFormularioAttribute>() != null);

		// Si hay propiedades con el atributo OrdenFormulario, las ordena por el atributo
		if (propiedadesConOrden.Any())
		{
			return propiedadesConOrden.OrderBy(p => p.GetCustomAttribute<OrdenFormularioAttribute>()?.Orden);
		}
		else
		{
			// Si no hay propiedades con el atributo OrdenFormularioAttribute, devuelve las propiedades sin ordenar
			return atributos;
		}
	}

}
