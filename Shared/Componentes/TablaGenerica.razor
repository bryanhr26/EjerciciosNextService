@using System.Reflection
@using BlazorApp1.Models
@using static BlazorApp1.Models.AtributosTabla
@inject IJSRuntime JSRuntime

@typeparam T

<h3>Lista de Vehículos</h3>
<div class="contenedor-tabla">
	<table class="table tabla-generica">
		<thead class="thead">
			<tr>
				@foreach (var columna in columnas)
				{
					if (columna.Visible)
					{
						<th style="width: @(columna.Ancho.ToString() + "px" ); text-align: @(columna.AlineacionTexto);">@columna.Nombre</th>
					}
				}
			</tr>
		</thead>
		<tbody class="tbody">
			@foreach (var item in ListaGenerica)
			{
				<tr @onclick="() => SeleccionarFila(item)" @ondblclick="() => RealizarAccion(item, Accion.Editar)" class="@ObtenerClaseFila(item)">
					@foreach (var columna in columnas)
					{
						if (columna.Visible)
						{
							if (columna.EsAccion)
							{
								<td style="width: @(columna.Ancho.ToString() + "px");">
									<span class="boton-accion" @onclick="() => RealizarAccion(item, Accion.Ver)">
										<i class="fas fa-eye"></i>
									</span>
									<span class="boton-accion" @onclick="() => RealizarAccion(item, Accion.Editar)">
										<i class="fas fa-pencil-alt"></i>
									</span>
									<span class="boton-accion" @onclick="() => RealizarAccion(item, Accion.Eliminar)">
										<i class="fas fa-trash-alt"></i>
									</span>
								</td>
							}
							else
							{
								var prop = typeof(T).GetProperty(columna.PropiedadModelo);
								var valor = prop?.GetValue(item);

								<td style="width: @(columna.Ancho.ToString() + "px" ); text-align: @(columna.AlineacionTexto);">
									@if (valor is bool boolValor)
									{
										if (boolValor)
										{
											<div style="text-align: center;"><i class="fas fa-check" style="font-size: 18px; color: black; "></i></div>
										}
									}
									else
									{
										@valor
									}

								</td>
							}
						}
					}
				</tr>
			}
		</tbody>
	</table>
</div>



<BlazorApp1.Shared.Componentes.Offcanvas CerrarOffcanvas="@ControlCerrarOffcanvas"
AnchoOffcanvas="800px"
IdOffcanvas="@idFicha"
TituloOffcanvas="@tituloFicha">
	<Formulario>
		@if (QuieroVerFormulario)
		{
			<FichaFormularioGenerica RegistroOrigenTabla="@RegistroSeleccionado"
			ModoAccion="accionSeleccionada"
			Lista_Tabulaciones="Lista_Tabulaciones"
			OnFormularioModificado="HandleFormularioModificado"
			OnGuardarCambios="GuardarCambios"
			OnCancelarCambios="CancelarCambios"
			OnEliminar="ConfirmarEliminar"
			OnCancelarEliminar="CancelarEliminar"
			OnCambiarPestanya="OnCambiarPestanya"
			PestanyaSeleccionada="PestanyaSeleccionada">
			</FichaFormularioGenerica>
		}
	</Formulario>
</BlazorApp1.Shared.Componentes.Offcanvas>

@code {
	[Parameter] public List<T>? ListaGenerica { get; set; }
	[Parameter] public List<Tabulacion>? Lista_Tabulaciones { get; set; }
	[Parameter] public PestanyaEnum PestanyaSeleccionada { get; set; } = PestanyaEnum.Uno;
	[Parameter] public string? idFicha { get; set; }
	[Parameter] public string? tituloFicha { get; set; }

	private T? RegistroOriginal { get; set; }
	private T? RegistroModificado { get; set; }
	private List<PropiedadesTablaColumna>? columnas;
	private T? RegistroSeleccionado;
	private Accion accionSeleccionada;
	private bool estaEliminando = false;
	private bool QuieroVerFormulario = false;
	private bool cambioGuardado = false;
	private bool esModificado = false;

	protected override void OnInitialized()
	{
		// Obtener las columnas utilizando el método de la clase Utilidades
		columnas = Utilidades.ObtenerPropiedadesColumnas<T>();
	}

	private void HandleFormularioModificado(bool modificado)
	{
		esModificado = modificado;
	}

	private void RealizarAccion(T item, Accion accion)
	{
		accionSeleccionada = accion;

		switch (accion)
		{
			case Accion.Ver:
				Ver(item);
				break;
			case Accion.Editar:
				Editar(item);
				break;
			case Accion.Eliminar:
				Eliminar(item);
				break;
		}
	}

	private void Ver(T item)
	{
		// Lógica para ver el item
		RegistroSeleccionado = item;
		OpenOffcanvas();
	}

	private void Editar(T item)
	{
		// Lógica para editar el item
		RegistroSeleccionado = item;
		OpenOffcanvas();
	}

	private void Eliminar(T item)
	{
		// Lógica para eliminar el item
		//Eliminar el vehículo
		estaEliminando = true; // Marcamos que estamos en el proceso de eliminar
		RegistroSeleccionado = item;
		OpenOffcanvas();
	}

	private async Task OpenOffcanvas()
	{
		// Guardamos una copia del valor original cuando se abre el offcanvas
		RegistroOriginal = (T)Activator.CreateInstance(typeof(T));
		if (RegistroSeleccionado != null)
		{
			RegistroOriginal = (T)Activator.CreateInstance(typeof(T));
			var propiedades = typeof(T).GetProperties();
			foreach (var propiedad in propiedades)
			{
				var valorOriginal = propiedad.GetValue(RegistroSeleccionado);
				propiedad.SetValue(RegistroOriginal, valorOriginal);
			}
		}

		//Llamar a la funcion JS para abrir Offcanvas
		QuieroVerFormulario = true;
		cambioGuardado = false;
		await JSRuntime.InvokeVoidAsync("abrirOffCanvas", idFicha);
	}

	private async Task ControlCerrarOffcanvas()
	{
		if (esModificado) //Si hay modificaciones
		{
			var confirmacion = await JSRuntime.InvokeAsync<bool>("confirm", "¿Tienes cambios no guardados. ¿Estás seguro de que quieres cerrar sin guardar?");

			if (!confirmacion)
			{
				return; // Si el usuario cancela el cierre, no hacemos nada
			}

			// Si el usuario acepta, restauramos el valor original
			if (RegistroOriginal != null && RegistroSeleccionado != null)
			{
				var propiedades = typeof(T).GetProperties();
				foreach (var propiedad in propiedades)
				{
					var valorOriginal = propiedad.GetValue(RegistroOriginal);
					propiedad.SetValue(RegistroSeleccionado, valorOriginal);
				}
			}
		}
		estaEliminando = false;
		QuieroVerFormulario = false;
		await JSRuntime.InvokeVoidAsync("CerrarOffcanvas", idFicha);
	}

	private void GuardarCambios()
	{
		if (esModificado)
		{
			if (RegistroSeleccionado != null)
			{
				// Guardar cambios en la lista
				var index = ListaGenerica?.FindIndex(v => v.Equals(RegistroSeleccionado));
				if (index.HasValue && index.Value >= 0)
				{
					ListaGenerica[index.Value] = (T)(object)RegistroSeleccionado;
				}

				cambioGuardado = true;
				esModificado = false;
			}
			ControlCerrarOffcanvas();
		}
	}

	private async Task CancelarCambios()
	{
		if (esModificado) //Si hay modificaciones
		{
			var confirmacion = await JSRuntime.InvokeAsync<bool>("confirm", "¿Tienes cambios no guardados. ¿Estás seguro de que quieres cerrar sin guardar?");

			if (!confirmacion)
			{
				return; // Si el usuario cancela el cierre, no hacemos nada
			}

			// Si el usuario acepta, restauramos el valor original
			if (RegistroOriginal != null && RegistroSeleccionado != null)
			{
				var propiedades = typeof(T).GetProperties();
				foreach (var propiedad in propiedades)
				{
					var valorOriginal = propiedad.GetValue(RegistroOriginal);
					propiedad.SetValue(RegistroSeleccionado, valorOriginal);
				}
			}
		}
		estaEliminando = false;
		QuieroVerFormulario = false;
		await JSRuntime.InvokeVoidAsync("CerrarOffcanvas", idFicha);
	}

	private void ConfirmarEliminar()
	{
		if (RegistroSeleccionado != null)
		{
			ListaGenerica?.Remove((T)(object)RegistroSeleccionado);
		}
		ControlCerrarOffcanvas();
	}

	private void CancelarEliminar()
	{
		estaEliminando = false;
		Console.WriteLine("Eliminación cancelada.");
		ControlCerrarOffcanvas();
	}

	private void OnCambiarPestanya(PestanyaEnum pestanyaSeleccionada)
	{
		PestanyaSeleccionada = pestanyaSeleccionada;
	}

	// Método para manejar la selección de una fila
	private void SeleccionarFila(T item)
	{
		RegistroSeleccionado = item;
	}

	// Método para obtener la clase CSS de la fila seleccionada
	private string ObtenerClaseFila(T item)
	{
		if (EqualityComparer<T>.Default.Equals(RegistroSeleccionado, item))
		{
			return "fila-seleccionada"; // Clase CSS personalizada para fila seleccionada
		}

		return string.Empty;
	}
}
