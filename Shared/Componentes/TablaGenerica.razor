@using System.Reflection
@using BlazorApp1.Models
@using static BlazorApp1.Models.AtributosTabla
@inject IJSRuntime JSRuntime

@typeparam T

<h3>@tituloTabla</h3>
<div class="botonesTabla">
	<button type="button" class="botonCrear" @onclick="Crear" style="display: flex; background: black; color: white; border-radius: 5px; padding: 10px 10px;">
		<span>Crear registro</span>
	</button>
</div>
<div class="contenedor-tabla">
	<table class="table tabla-generica">
		<thead class="thead">
			<tr>
				@foreach (var columna in columnas)
				{
					if (columna.Visible)
					{
						<th style="width: @(columna.Ancho.ToString() + "px" ); text-align: @(columna.AlineacionTexto);">@columna.Nombre</th>
					}
				}
			</tr>
		</thead>
		<tbody class="tbody">
			@foreach (var item in ListaGenerica)
			{
				<tr @onclick="() => SeleccionarFila(item)" @ondblclick="() => RealizarAccion(item, Accion.Editar)" class="@ObtenerClaseFila(item)">
					@foreach (var columna in columnas)
					{
						if (columna.Visible)
						{
							if (columna.EsAccion)
							{
								<td style="width: @(columna.Ancho.ToString() + "px");">
									<span class="boton-accion" @onclick="() => RealizarAccion(item, Accion.Ver)" title="Consultar registro">
										<i class="fas fa-eye"></i>
									</span>
									<span class="boton-accion" @onclick="() => RealizarAccion(item, Accion.Editar)" title="Modificar registro">
										<i class="fas fa-pencil-alt"></i>
									</span>
									<span class="boton-accion" @onclick="() => RealizarAccion(item, Accion.Eliminar)" title="Eliminar registro">
										<i class="fas fa-trash-alt"></i>
									</span>
								</td>
							}
							else
							{
								var prop = typeof(T).GetProperty(columna.PropiedadModelo);
								var valor = prop?.GetValue(item);

								<td style="width: @(columna.Ancho.ToString() + "px" ); text-align: @(columna.AlineacionTexto);">
									@if (valor is bool boolValor)
									{
										if (boolValor)
										{
											<div style="text-align: center;"><i class="fas fa-check" style="font-size: 18px; color: black; "></i></div>
										}
									}
									else
									{
										@valor
									}

								</td>
							}
						}
					}
				</tr>
			}
		</tbody>
	</table>
</div>



<BlazorApp1.Shared.Componentes.Offcanvas CerrarOffcanvas="@ControlCerrarOffcanvas"
AnchoOffcanvas="800px"
IdOffcanvas="@idFicha"
TituloOffcanvas="@tituloFicha">
	<Formulario>
		@if (QuieroVerFormulario)
		{
			<FichaFormularioGenerica RegistroOrigenTabla="@RegistroSeleccionado"
			ModoAccion="accionSeleccionada"
			Lista_Tabulaciones="Lista_Tabulaciones"
			OnCambiarPestanya="OnCambiarPestanya"
			PestanyaSeleccionada="PestanyaSeleccionada">

			</FichaFormularioGenerica>
		}
	</Formulario>
</BlazorApp1.Shared.Componentes.Offcanvas>

@code {
	[Parameter] public List<T>? ListaGenerica { get; set; }
	[Parameter] public List<Tabulacion>? Lista_Tabulaciones { get; set; }
	[Parameter] public PestanyaEnum PestanyaSeleccionada { get; set; } = PestanyaEnum.Uno;
	[Parameter] public string? idFicha { get; set; }
	[Parameter] public string? tituloFicha { get; set; }
	[Parameter] public string? tituloTabla { get; set; }

	private List<PropiedadesTablaColumna>? columnas;
	private T? RegistroSeleccionado;
	private Accion accionSeleccionada;
	private bool estaEliminando = false;
	private bool QuieroVerFormulario = false;
	private bool cambioGuardado = false;
	private bool esModificado = false;

	protected override void OnInitialized()
	{
		// Obtener las columnas utilizando el método de la clase Utilidades
		columnas = Utilidades.ObtenerPropiedadesColumnas<T>();
	}

	private void HandleFormularioModificado(bool modificado)
	{
		esModificado = modificado;
	}

	private void Crear()
	{
		T instancia = Activator.CreateInstance<T>();
		RealizarAccion(instancia, Accion.Crear);
	}

	private void RealizarAccion(T item, Accion accion)
	{
		accionSeleccionada = accion;
		RegistroSeleccionado = item;

		switch (accion)
		{
			case Accion.Ver:
				break;
			case Accion.Editar:
				break;
			case Accion.Eliminar:
				estaEliminando = true;
				break;
			case Accion.Crear:
				break;
		}
		OpenOffcanvas();
	}

	private async Task OpenOffcanvas()
	{
		//Llamar a la funcion JS para abrir Offcanvas
		QuieroVerFormulario = true;
		cambioGuardado = false;
		await JSRuntime.InvokeVoidAsync("abrirOffCanvas", idFicha);
	}

	private async Task ControlCerrarOffcanvas()
	{
		if (esModificado) //Si hay modificaciones
		{
			var confirmacion = await JSRuntime.InvokeAsync<bool>("confirm", "¿Tienes cambios no guardados. ¿Estás seguro de que quieres cerrar sin guardar?");

			if (!confirmacion)
			{
				return; // Si el usuario cancela el cierre, no hacemos nada
			}

		}
		estaEliminando = false;
		QuieroVerFormulario = false;
		await JSRuntime.InvokeVoidAsync("CerrarOffcanvas", idFicha);
	}

	private void OnCambiarPestanya(PestanyaEnum pestanyaSeleccionada)
	{
		PestanyaSeleccionada = pestanyaSeleccionada;
	}

	// Método para manejar la selección de una fila
	private void SeleccionarFila(T item)
	{
		RegistroSeleccionado = item;
	}

	// Método para obtener la clase CSS de la fila seleccionada
	private string ObtenerClaseFila(T item)
	{
		if (EqualityComparer<T>.Default.Equals(RegistroSeleccionado, item))
		{
			return "fila-seleccionada"; // Clase CSS personalizada para fila seleccionada
		}

		return string.Empty;
	}
}
